#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –Ω–æ–≤–∏—á–∫–æ–≤ –≤ –±–æ—Ç–µ.
"""

import sys
import os
import asyncio
from unittest.mock import Mock

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from data.db import (
    init_database,
    save_user_time,
    get_user_time,
    add_newbie_practice,
    get_newbie_practice_by_number,
    get_current_weekday,
    increment_user_days
)
from app.schedule.scheduler import send_newbie_practice, send_practice_to_user


class MockContext:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–∞."""
    def __init__(self):
        self.bot = Mock()
        self.bot.send_message = Mock()


async def test_newbie_practice_sending():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∞–∫—Ç–∏–∫–∏ –Ω–æ–≤–∏—á–∫—É."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∞–∫—Ç–∏–∫–∏ –Ω–æ–≤–∏—á–∫—É...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        init_database()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤
        practice_data = {
            'title': '–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤',
            'video_url': 'https://www.youtube.com/watch?v=test_newbie',
            'duration_minutes': 15,
            'channel_name': 'Test Channel',
            'description': '–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö',
            'number_practices': 1
        }
        
        success = add_newbie_practice(**practice_data)
        if success:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user_id = 123456789
        test_chat_id = 123456789
        current_weekday = get_current_weekday()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –Ω–æ–≤–∏—á–∫–∞
        save_user_time(
            user_id=test_user_id,
            chat_id=test_chat_id,
            notify_time="09:00",
            user_name="Test Newbie User",
            onboarding_weekday=current_weekday
        )
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å –¥–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {current_weekday}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = get_user_time(test_user_id)
        if user_data:
            chat_id, notify_time, user_name, user_phone, user_days, onboarding_weekday = user_data
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            print(f"   - –î–Ω–∏: {user_days}")
            print(f"   - –î–µ–Ω—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {onboarding_weekday}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∞–∫—Ç–∏–∫–∏ –Ω–æ–≤–∏—á–∫—É
        mock_context = MockContext()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–æ–≤–∏—á–∫–æ–º (user_days <= 28)
        if user_days <= 28:
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –Ω–æ–≤–∏—á–æ–∫")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é send_newbie_practice
            await send_newbie_practice(
                context=mock_context,
                user_id=test_user_id,
                chat_id=test_chat_id,
                onboarding_weekday=onboarding_weekday,
                day_number=user_days + 1
            )
            print("‚úÖ –ü—Ä–∞–∫—Ç–∏–∫–∞ –¥–ª—è –Ω–æ–≤–∏—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            if mock_context.bot.send_message.called:
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
                call_args = mock_context.bot.send_message.call_args
                print(f"   - Chat ID: {call_args[1]['chat_id']}")
                print(f"   - –¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç '–¥–µ–Ω—å': {'–¥–µ–Ω—å' in call_args[1]['text']}")
            else:
                print("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return False
        else:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –Ω–æ–≤–∏—á–æ–∫")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_practice_number_calculation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏."""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–Ω—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        test_scenarios = [
            (7, 1),   # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ ‚Üí –ü—Ä–∞–∫—Ç–∏–∫–∞ #1
            (1, 2),   # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Üí –ü—Ä–∞–∫—Ç–∏–∫–∞ #2
            (2, 3),   # –í—Ç–æ—Ä–Ω–∏–∫ ‚Üí –ü—Ä–∞–∫—Ç–∏–∫–∞ #3
            (3, 4),   # –°—Ä–µ–¥–∞ ‚Üí –ü—Ä–∞–∫—Ç–∏–∫–∞ #4
            (4, 5),   # –ß–µ—Ç–≤–µ—Ä–≥ ‚Üí –ü—Ä–∞–∫—Ç–∏–∫–∞ #5
            (5, 6),   # –ü—è—Ç–Ω–∏—Ü–∞ ‚Üí –ü—Ä–∞–∫—Ç–∏–∫–∞ #6
            (6, 7),   # –°—É–±–±–æ—Ç–∞ ‚Üí –ü—Ä–∞–∫—Ç–∏–∫–∞ #7
        ]
        
        for onboarding_weekday, expected_practice in test_scenarios:
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–º–µ—Ä –ø—Ä–∞–∫—Ç–∏–∫–∏: (onboarding_weekday % 7) + 1
            calculated_practice = (onboarding_weekday % 7) + 1
            
            weekday_names = {1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 2: "–í—Ç–æ—Ä–Ω–∏–∫", 3: "–°—Ä–µ–¥–∞", 4: "–ß–µ—Ç–≤–µ—Ä–≥", 
                           5: "–ü—è—Ç–Ω–∏—Ü–∞", 6: "–°—É–±–±–æ—Ç–∞", 7: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}
            
            weekday_name = weekday_names.get(onboarding_weekday, f"–î–µ–Ω—å {onboarding_weekday}")
            
            print(f"   {weekday_name} ({onboarding_weekday}) ‚Üí –ü—Ä–∞–∫—Ç–∏–∫–∞ #{calculated_practice} (–æ–∂–∏–¥–∞–ª–æ—Å—å #{expected_practice})")
            
            if calculated_practice == expected_practice:
                print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ")
            else:
                print(f"   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üßò‚Äç‚ôÄÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –Ω–æ–≤–∏—á–∫–æ–≤ –≤ –±–æ—Ç–µ")
    print("=" * 60)
    
    tests = [
        test_newbie_practice_sending,
        test_practice_number_calculation
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if await test():
            passed += 1
        print()
    
    print("=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –≤ Telegram:")
        print("   1. –ù–∞–π–¥–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ Telegram")
        print("   2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        print("   3. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        print("   4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /test –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏")
        return True
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
