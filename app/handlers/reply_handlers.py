"""Reply keyboard handlers for YogaDailyBot.
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.
"""

from telegram import Update
from telegram.ext import ContextTypes
from app.keyboards import get_main_reply_keyboard


async def handle_reply_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∞–º Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:
    - "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è" - –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    - "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É" - –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏–∫
    - "–ü–æ–º–æ—â—å" - –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –ø–æ–º–æ—â–∏
    - "–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞" - –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É —Å–±—Ä–æ—Å–∞
    - "–î–æ–Ω–∞—Ç—ã" - –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –¥–æ–Ω–∞—Ç–æ–≤
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = update.message.text
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if message_text == "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è":
        from app.handlers.set_time import handle_set_time_callback
        # –°–æ–∑–¥–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é callback query –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
        fake_query = type('obj', (object,), {
            'answer': lambda self: None,
            'data': 'change_time'
        })()
        
        # –°–æ–∑–¥–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é update —Å callback_query
        fake_update = type('obj', (object,), {
            'callback_query': fake_query,
            'effective_user': update.effective_user,
            'effective_chat': update.effective_chat
        })()
        
        await handle_set_time_callback(fake_update, context)
        
    elif message_text == "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É":
        from app.handlers.suggest_practice import handle_suggest_practice_callback
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å–æ–∑–¥–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        fake_query = type('obj', (object,), {
            'answer': lambda self: None,
            'data': 'suggest_practice'
        })()
        
        fake_update = type('obj', (object,), {
            'callback_query': fake_query,
            'effective_user': update.effective_user,
            'effective_chat': update.effective_chat
        })()
        
        await handle_suggest_practice_callback(fake_update, context)
        
    elif message_text == "–ü–æ–º–æ—â—å":
        from app.handlers.help import handle_help_callback
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å–æ–∑–¥–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        fake_query = type('obj', (object,), {
            'answer': lambda self: None,
            'data': 'help'
        })()
        
        fake_update = type('obj', (object,), {
            'callback_query': fake_query,
            'effective_user': update.effective_user,
            'effective_chat': update.effective_chat
        })()
        
        await handle_help_callback(fake_update, context)
        
    elif message_text == "–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞":
        from app.onboarding import reset_user_callback
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å–æ–∑–¥–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        fake_query = type('obj', (object,), {
            'answer': lambda self: None,
            'data': 'reset'
        })()
        
        fake_update = type('obj', (object,), {
            'callback_query': fake_query,
            'effective_user': update.effective_user,
            'effective_chat': update.effective_chat
        })()
        
        await reset_user_callback(fake_update, context)
        
    elif message_text == "–î–æ–Ω–∞—Ç—ã":
        from app.handlers.donations import handle_donations_callback
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å–æ–∑–¥–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        fake_query = type('obj', (object,), {
            'answer': lambda self: None,
            'data': 'donations'
        })()
        
        fake_update = type('obj', (object,), {
            'callback_query': fake_query,
            'effective_user': update.effective_user,
            'effective_chat': update.effective_chat
        })()
        
        await handle_donations_callback(fake_update, context)
        
    else:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã,
        # –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
        return


async def show_main_reply_keyboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–π.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    menu_text = (
        "üì± **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞:"
    )
    
    await update.message.reply_text(
        menu_text,
        reply_markup=get_main_reply_keyboard(),
        parse_mode='Markdown'
    )
