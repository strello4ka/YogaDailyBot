"""Handler for accepting user-suggested practice links."""

import re
from telegram import Update
from telegram.ext import ContextTypes


async def handle_suggest_practice_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É'.
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø—Ä–∞–∫—Ç–∏–∫.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query –µ—Å–ª–∏ —ç—Ç–æ inline –∫–Ω–æ–ø–∫–∞
    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º chat_id
    chat_id = update.effective_chat.id
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –ø—Ä–∞–∫—Ç–∏–∫
    suggest_text = (
        "–•–æ—á–µ—à—å, —á—Ç–æ–±—ã —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ YogaDailyBot?\n\n"
        "–ü–æ–¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª—é –µ—ë!\n\n"
        "*–ö–∞–∫ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å?*\n"
        "–æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "- –æ–¥–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ\n"
        "- –ª—é–±–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ –ø–∏—Å–∞—Ç—å)\n\n"
        "*–ü—Ä–∏–º–µ—Ä:*\n"
        "https://youtu.be/oTzetTgYpSU?si=ewHrtkwVb4hFO1NG\n"
        "–ª—é–±–ª—é –¥–µ–ª–∞—Ç—å —ç—Ç—É –ø—Ä–∞–∫—Ç–∏–∫—É, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ –¥–µ–Ω—å"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await context.bot.send_message(
        chat_id=chat_id,
        text=suggest_text,
        parse_mode='Markdown',
        disable_web_page_preview=True
    )
    
    # –û—á–∏—â–∞–µ–º –¥—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ
    context.user_data.pop('waiting_for_time', None)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∏
    context.user_data['waiting_for_practice_suggestion'] = True


def validate_video_url(url: str) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏.
    
    Args:
        url: –°—Ç—Ä–æ–∫–∞ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤–∏–¥–µ–æ
        
    Returns:
        tuple: (is_valid, error_message –∏–ª–∏ cleaned_url)
    """
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    url = url.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ YouTube
    youtube_patterns = [
        r'https?://(?:www\.)?youtube\.com/watch\?v=([a-zA-Z0-9_-]+)',
        r'https?://(?:www\.)?youtu\.be/([a-zA-Z0-9_-]+)',
        r'https?://(?:www\.)?youtube\.com/embed/([a-zA-Z0-9_-]+)',
        r'https?://(?:www\.)?youtube\.com/v/([a-zA-Z0-9_-]+)'
    ]
    
    for pattern in youtube_patterns:
        match = re.match(pattern, url)
        if match:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
            video_id = match.group(1)
            return True, f"https://youtu.be/{video_id}"
    
    return False, "–•–º, —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ."


async def handle_practice_suggestion_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∏
    if not context.user_data.get('waiting_for_practice_suggestion'):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    message_text = update.message.text
    
    # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    lines = [line.strip() for line in message_text.split('\n') if line.strip()]
    
    if not lines:
        await update.message.reply_text(
            "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "—Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ\n"
            "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
        )
        return
    
    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Å—ã–ª–∫–æ–π
    video_url = lines[0]
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
    is_valid, result = validate_video_url(video_url)
    
    if not is_valid:
        await update.message.reply_text(
            f"‚ùå {result}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ YouTube –≤–∏–¥–µ–æ."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
    comment = '\n'.join(lines[1:]) if len(lines) > 1 else None
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    user_id = update.effective_user.id
    
    from data.db import save_user_practice_suggestion
    save_success = save_user_practice_suggestion(user_id, result, comment)
    
    if not save_success:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–≤–æ–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
        )
        return
    
    # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    context.user_data.pop('waiting_for_practice_suggestion', None)
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    success_text = (
        "–°–ø–∞—Å–∏–±–æ, –ø—Ä–∞–∫—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ —Å–∫–æ—Ä–æ –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏!\n"
        "–ë–ª–∞–≥–æ–¥–∞—Ä—è —Ç–µ–±–µ —è —Å—Ç–∞–Ω–æ–≤–ª—é—Å—å –µ—â—ë –∫—Ä—É—á–µ üß°"
    )
    
    await update.message.reply_text(success_text)
