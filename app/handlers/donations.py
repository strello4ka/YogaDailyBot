"""Handler for donations information."""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes


async def handle_donations_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–Ω–∞—Ç—ã'.
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ø—Ä–æ–µ–∫—Ç–∞.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query –µ—Å–ª–∏ —ç—Ç–æ inline –∫–Ω–æ–ø–∫–∞
    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º chat_id
    chat_id = update.effective_chat.id
    
    # –õ–∞–∫–æ–Ω–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
    donations_text = (
        "YogaDailyBot ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, –Ω–æ –µ—Å–ª–∏ –æ–Ω –¥–µ–ª–∞–µ—Ç —Ç–≤–æ—é –∂–∏–∑–Ω—å –ª—É—á—à–µ, —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏–µ!\n\n"
        "–õ—é–±–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ü–µ–Ω–Ω–∞, –æ—Ç 1 —Ä—É–±–ª—è –¥–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã", callback_data="donate_card")],
        [InlineKeyboardButton("‚≠êÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —á–µ—Ä–µ–∑ Telegram Stars", callback_data="donate_stars")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await context.bot.send_message(
        chat_id=chat_id,
        text=donations_text,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )


async def handle_donate_card_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã'.
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º chat_id
    chat_id = update.effective_chat.id
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º –∫–∞—Ä—Ç—ã –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é
    card_text = (
        "üí≥ **–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:**\n"
        "`2200701902278180`\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç üß°"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await context.bot.send_message(
        chat_id=chat_id,
        text=card_text,
        parse_mode='Markdown'
    )


async def handle_donate_stars_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —á–µ—Ä–µ–∑ Telegram Stars'.
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∑—ã–≤–æ–º –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∏ –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º chat_id
    chat_id = update.effective_chat.id
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∑—ã–≤–æ–º –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥
    stars_text = (
        "**–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á–µ—Ä–µ–∑ Telegram Stars** ‚≠êÔ∏è\n\n"
        "–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:\n\n"
        "Telegram Stars ‚Äî —ç—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞ Telegram, "
        "–∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–æ—Ç–æ–≤."
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥
    keyboard = [
        [InlineKeyboardButton("1 (—Ç–µ—Å—Ç) ‚≠êÔ∏è", callback_data="stars_1")],
        [InlineKeyboardButton("10 ‚≠êÔ∏è", callback_data="stars_10")],
        [InlineKeyboardButton("30 ‚≠êÔ∏è", callback_data="stars_30")],
        [InlineKeyboardButton("50 ‚≠êÔ∏è", callback_data="stars_50")],
        [InlineKeyboardButton("100 ‚≠êÔ∏è", callback_data="stars_100")],
        [InlineKeyboardButton("500 ‚≠êÔ∏è", callback_data="stars_500")],
        [InlineKeyboardButton("1000 ‚≠êÔ∏è", callback_data="stars_1000")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await context.bot.send_message(
        chat_id=chat_id,
        text=stars_text,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )




async def handle_stars_amount_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥.
    
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º chat_id, user_id –∏ user_name
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name or "–¥—Ä—É–≥"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∏–∑ callback_data
    callback_data = update.callback_query.data
    stars_amount = int(callback_data.split('_')[1])  # "stars_50" -> 50
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏
    # –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª—é—Ç—É "XTR" (Telegram Stars)
    try:
        await context.bot.send_invoice(
            chat_id=chat_id,
            title="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ YogaDailyBot",
            description=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç üß°",
            payload=f"donation_{user_id}_{stars_amount}",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π payload –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            provider_token="",  # –î–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
            currency="XTR",  # Telegram Stars
            prices=[{"label": f"{stars_amount} ‚≠êÔ∏è", "amount": stars_amount}],
            start_parameter=f"donation_{stars_amount}",  # –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è deep linking
            is_flexible=False,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            send_phone_number_to_provider=False,
            send_email_to_provider=False
        )
    except Exception as e:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_text = (
            "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞**\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã. "
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã."
        )
        await context.bot.send_message(
            chat_id=chat_id,
            text=error_text,
            parse_mode='Markdown'
        )


async def handle_pre_checkout_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre-checkout query –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.
    
    –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ pre_checkout_query –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.pre_checkout_query
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–æ–Ω–∞—Ç (payload –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "donation_")
    if query.invoice_payload.startswith("donation_"):
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É
        await query.answer(ok=True)
    else:
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –æ–ø–ª–∞—Ç—É —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
        await query.answer(
            ok=False, 
            error_message="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


async def handle_successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã.
    
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    payment = update.message.successful_payment
    chat_id = update.effective_chat.id
    user_name = update.effective_user.first_name or "–¥—Ä—É–≥"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    stars_amount = payment.total_amount
    payload = payment.invoice_payload
