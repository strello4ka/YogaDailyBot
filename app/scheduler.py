"""Scheduler module for YogaDailyBot.
Handles daily practice sending and scheduling.
"""

import sys
import os
# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import asyncio
import logging
from datetime import datetime, time
from telegram.ext import ContextTypes
from data.db import (
    get_users_by_time, 
    get_yoga_practice_by_weekday_order,
    increment_user_days,
    get_user_days,
    log_practice_sent,
    get_current_weekday
)

logger = logging.getLogger(__name__)


async def send_daily_practice(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
    
    Args:
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
        current_time = datetime.now().strftime("%H:%M")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É –≤ —ç—Ç–æ –≤—Ä–µ–º—è
        users = get_users_by_time(current_time)
        
        if not users:
            logger.info(f"–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ –≤ {current_time}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        current_weekday = get_current_weekday()
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–∫—Ç–∏–∫–∏ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ {current_time}, –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {current_weekday}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–∫—Ç–∏–∫—É –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for user_id, chat_id in users:
            await send_practice_to_user(context, user_id, chat_id, current_weekday)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫: {e}")


async def send_practice_to_user(context: ContextTypes.DEFAULT_TYPE, user_id: int, chat_id: int, weekday: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∞–∫—Ç–∏–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_id: ID —á–∞—Ç–∞
        weekday: –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_days = get_user_days(user_id)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–Ω–µ–π
        increment_user_days(user_id)
        new_day_number = user_days + 1
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–∫—Ç–∏–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
        practice = get_yoga_practice_by_weekday_order(weekday, new_day_number)
        
        if not practice:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥–ª—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ {weekday}, –¥–µ–Ω—å {new_day_number}")
            return
        
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
        (practice_id, title, video_url, time_practices, channel_name, 
         description, my_description, intensity, practice_weekday, created_at, updated_at) = practice
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = format_practice_message(new_day_number, my_description, time_practices, intensity, channel_name, video_url)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=chat_id,
            text=message_text,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        log_practice_sent(user_id, practice_id, new_day_number)
        
        logger.info(f"–ü—Ä–∞–∫—Ç–∏–∫–∞ {practice_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, –¥–µ–Ω—å {new_day_number}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


def format_practice_message(day_number: int, my_description: str, time_practices: int, 
                          intensity: str, channel_name: str, video_url: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π.
    
    Args:
        day_number: –Ω–æ–º–µ—Ä –¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        my_description: –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
        time_practices: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö
        intensity: –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
        channel_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        video_url: —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    message_parts = [
        f"{day_number} –¥–µ–Ω—å\n"
    ]
    
    if my_description:
        message_parts.append(f"{my_description}")
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç my_description, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        message_parts.append(f"–°–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å –ø—Ä–∞–∫—Ç–∏–∫–∞ –æ—Ç –∫–∞–Ω–∞–ª–∞ {channel_name}")
    
    message_parts.append(f"\nüåÄ {time_practices} –º–∏–Ω—É—Ç")
    
    if intensity:
        message_parts.append(f"üåÄ {intensity}")
    
    message_parts.append(f"üåÄ {channel_name}")
    
    message_parts.append(f"\n‚ñ∂Ô∏è [Youtube]({video_url})")
    
    return "\n".join(message_parts)


def schedule_daily_practices(application):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∞–∫—Ç–∏–∫.
    
    Args:
        application: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
    """
    try:
        job_queue = application.job_queue
        
        if not job_queue:
            logger.error("JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∞–∫—Ç–∏–∫ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        # –≠—Ç–æ –Ω–µ –æ—á–µ–Ω—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ, –Ω–æ –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è MVP
        job_queue.run_repeating(
            send_daily_practice,
            interval=60,  # –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            first=1,  # —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
            name="daily_practice_sender"
        )
        
        logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∞–∫—Ç–∏–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫: {e}")


async def send_test_practice(context: ContextTypes.DEFAULT_TYPE, user_id: int, chat_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏).
    
    Args:
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_id: ID —á–∞—Ç–∞
    """
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_days = get_user_days(user_id)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–Ω–µ–π
        increment_user_days(user_id)
        new_day_number = user_days + 1
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        current_weekday = get_current_weekday()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–∫—Ç–∏–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
        practice = get_yoga_practice_by_weekday_order(current_weekday, new_day_number)
        
        if not practice:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥–ª—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ {current_weekday}, –¥–µ–Ω—å {new_day_number}")
            await context.bot.send_message(chat_id, "‚ùå –ü—Ä–∞–∫—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏")
            return
        
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
        (practice_id, title, video_url, time_practices, channel_name, 
         description, my_description, intensity, practice_weekday, created_at, updated_at) = practice
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = format_practice_message(new_day_number, my_description, time_practices, intensity, channel_name, video_url)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=chat_id,
            text=message_text,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        log_practice_sent(user_id, practice_id, new_day_number)
        
        logger.info(f"–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ {practice_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, –¥–µ–Ω—å {new_day_number}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await context.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏: {str(e)}")
        except:
            pass
